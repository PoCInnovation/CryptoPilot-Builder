#!/usr/bin/env python3
"""
Script de test pour v√©rifier que l'interface AutoWallet peut r√©cup√©rer les vraies news
"""

from services.news_service import news_service
from services.ai_analyzer import ai_analyzer
import json

def test_interface_news():
    """Test que l'interface peut r√©cup√©rer et afficher les vraies news"""
    print("üß™ Test de l'interface AutoWallet avec vraies news")
    print("=" * 60)
    
    # R√©cup√©rer les news
    print("üì° R√©cup√©ration des news depuis CryptoCompare...")
    news = news_service.get_recent_news(hours=24)
    
    if not news:
        print("‚ùå Aucune news r√©cup√©r√©e")
        return False
    
    print(f"‚úÖ {len(news)} news r√©cup√©r√©es")
    
    # Afficher les premi√®res news avec formatage pour l'interface
    print("\nüì∞ News pour l'interface AutoWallet:")
    for i, n in enumerate(news[:5]):
        print(f"\n{i+1}. {n.title}")
        print(f"   Source: {n.source}")
        print(f"   Date: {n.published_at.strftime('%Y-%m-%d %H:%M')}")
        print(f"   Cryptos: {', '.join(n.crypto_mentions) if n.crypto_mentions else 'Aucune'}")
        print(f"   Sentiment: {n.sentiment_score:.2f}")
        print(f"   Pertinence: {n.relevance_score:.2f}")
        print(f"   Impact: {n.impact_level}")
        print(f"   URL: {n.url}")
    
    # Tester l'analyseur IA
    print("\nüß† Test de l'analyseur IA...")
    alerts = ai_analyzer.analyze_news_for_investment(news[:3])
    
    if alerts:
        print(f"‚úÖ {len(alerts)} alertes g√©n√©r√©es")
        for i, alert in enumerate(alerts):
            print(f"\n{i+1}. Alerte {alert.alert_type.upper()} pour {alert.crypto_symbol}")
            print(f"   Confiance: {alert.confidence_score:.2f}")
            print(f"   Raisonnement: {alert.reasoning[:100]}...")
    else:
        print("‚ö†Ô∏è  Aucune alerte g√©n√©r√©e")
    
    # Simuler le format JSON que l'interface recevra
    print("\nüìä Format JSON pour l'interface:")
    news_data = []
    for news in news[:3]:
        news_data.append({
            "id": news.id,
            "title": news.title,
            "content": news.content,
            "source": news.source,
            "published_at": news.published_at.isoformat(),
            "url": news.url,
            "sentiment_score": news.sentiment_score,
            "relevance_score": news.relevance_score,
            "crypto_mentions": news.crypto_mentions,
            "impact_level": news.impact_level
        })
    
    print(json.dumps(news_data, indent=2, ensure_ascii=False))
    
    return True

def test_news_api_endpoint():
    """Test que l'endpoint API fonctionne"""
    print("\nüîå Test de l'endpoint API /api/autowallet/news")
    print("=" * 50)
    
    try:
        from mcp_client.autowallet_routes import create_autowallet_routes
        from flask import Flask
        
        # Cr√©er une app Flask de test
        app = Flask(__name__)
        create_autowallet_routes(app)
        
        print("‚úÖ Routes AutoWallet cr√©√©es avec succ√®s")
        print("‚úÖ Endpoint /api/autowallet/news disponible")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des routes: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Test de l'interface AutoWallet avec vraies news")
    print("=" * 60)
    
    # Test des news
    news_ok = test_interface_news()
    
    # Test de l'API
    api_ok = test_news_api_endpoint()
    
    if news_ok and api_ok:
        print("\nüéâ Tous les tests sont pass√©s !")
        print("   L'interface AutoWallet peut maintenant afficher de vraies news crypto !")
        print("\nüìã Prochaines √©tapes:")
        print("   1. D√©marrez le serveur: python app.py")
        print("   2. Ouvrez l'interface AutoWallet")
        print("   3. V√©rifiez que les vraies news s'affichent")
    else:
        print("\n‚ùå Certains tests ont √©chou√©")
        print("   V√©rifiez la configuration et les logs")

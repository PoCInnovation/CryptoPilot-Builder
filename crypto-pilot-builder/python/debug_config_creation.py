#!/usr/bin/env python3
"""
Script pour d√©boguer la cr√©ation de configuration AutoWallet
"""

import requests
import json
import os

def check_server_status():
    """V√©rifie le statut du serveur"""
    print("üîç V√©rification du statut du serveur")
    print("=" * 50)
    
    try:
        # Test de la page d'accueil
        response = requests.get("http://localhost:5000/", timeout=5)
        print(f"‚úÖ Serveur accessible - Status: {response.status_code}")
        
        # Test de l'endpoint de sant√©
        health_response = requests.get("http://localhost:5000/api/health", timeout=5)
        if health_response.status_code == 200:
            print("‚úÖ Endpoint de sant√© accessible")
        else:
            print(f"‚ö†Ô∏è  Endpoint de sant√©: {health_response.status_code}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Serveur non accessible sur localhost:5000")
        print("   Assurez-vous que le serveur est d√©marr√©")
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")

def test_config_endpoint():
    """Test de l'endpoint de configuration"""
    print("\nüîß Test de l'endpoint de configuration")
    print("=" * 50)
    
    url = "http://localhost:5000/api/autowallet/config"
    
    # Test GET (devrait retourner 404 si pas de config)
    print(f"üì° Test GET: {url}")
    try:
        response = requests.get(url, timeout=10)
        print(f"   Status: {response.status_code}")
        print(f"   R√©ponse: {response.text}")
        
        if response.status_code == 404:
            print("   ‚úÖ Erreur 404 attendue (pas de configuration)")
        else:
            print("   ‚ö†Ô∏è  R√©ponse inattendue")
            
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    # Test POST (cr√©ation de configuration)
    print(f"\nüì° Test POST: {url}")
    config_data = {
        "is_active": True,
        "analysis_interval": 15,
        "max_investment_per_trade": 100,
        "risk_tolerance": "medium",
        "investment_strategy": "balanced",
        "min_confidence_score": 0.3,
        "max_daily_trades": 10,
        "stop_loss_percentage": 5.0,
        "take_profit_percentage": 15.0
    }
    
    try:
        response = requests.post(url, json=config_data, timeout=10)
        print(f"   Status: {response.status_code}")
        print(f"   R√©ponse: {response.text}")
        
        if response.status_code == 201:
            print("   ‚úÖ Configuration cr√©√©e avec succ√®s")
        elif response.status_code == 401:
            print("   ‚ùå Erreur d'authentification (JWT requis)")
        elif response.status_code == 500:
            print("   ‚ùå Erreur serveur")
        else:
            print("   ‚ö†Ô∏è  R√©ponse inattendue")
            
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")

def check_environment():
    """V√©rifie l'environnement"""
    print("\nüåç V√©rification de l'environnement")
    print("=" * 50)
    
    # V√©rifier les variables d'environnement
    env_vars = [
        "JWT_SECRET_KEY",
        "NEWS_API_KEY",
        "SMTP_SERVER",
        "SMTP_USERNAME"
    ]
    
    for var in env_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: {value[:20]}..." if len(value) > 20 else f"‚úÖ {var}: {value}")
        else:
            print(f"‚ùå {var}: Non d√©finie")
    
    # V√©rifier la structure des dossiers
    print(f"\nüìÅ Dossier courant: {os.getcwd()}")
    
    # V√©rifier les fichiers importants
    files_to_check = [
        "app.py",
        "mcp_client/autowallet_routes.py",
        "services/autowallet_service.py"
    ]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path}")

def check_autowallet_service():
    """V√©rifie le service AutoWallet"""
    print("\nü§ñ V√©rification du service AutoWallet")
    print("=" * 50)
    
    try:
        # Importer le service
        import sys
        sys.path.append('.')
        
        from services.autowallet_service import AutowalletService
        
        # Cr√©er une instance
        service = AutowalletService()
        print("‚úÖ Service AutoWallet import√© avec succ√®s")
        
        # V√©rifier les m√©thodes
        methods = [method for method in dir(service) if not method.startswith('_')]
        print(f"‚úÖ M√©thodes disponibles: {len(methods)}")
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    print("üöÄ Debug de la cr√©ation de configuration AutoWallet")
    print("=" * 70)
    
    check_server_status()
    check_environment()
    test_config_endpoint()
    check_autowallet_service()
    
    print("\nüìã R√©sum√©:")
    print("   Si vous obtenez une erreur 401, c'est normal (pas d'authentification)")
    print("   Si vous obtenez une erreur 500, v√©rifiez les logs du serveur")
    print("   Le probl√®me peut venir de l'import des services")

"""Agent Logger - Monitoring et feedback du pipeline de trading."""

import asyncio
import structlog
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta
from uagents import Agent, Context
from uagents.setup import fund_agent_if_low

from ..models.trade import TradeRequest, TradeStatus
from ..models.prediction import Prediction
from ..models.signal import Signal

logger = structlog.get_logger(__name__)

class LoggerAgent(Agent):
    """Agent Logger pour le monitoring et feedback du pipeline."""
    
    def __init__(self):
        super().__init__(
            name="LoggerAgent",
            port=9005,
            seed="logger_seed_12345",
            endpoint=["http://127.0.0.1:9005/submit"]
        )
        
        # Configuration du monitoring
        self.monitoring_config = {
            "log_retention_days": 30,
            "alert_threshold_execution_rate": 0.7,  # 70% de succ√®s
            "alert_threshold_confidence": 0.5,      # 50% de confiance
            "performance_update_interval": 300      # 5 minutes
        }
        
        # Donn√©es de monitoring du pipeline
        self.pipeline_logs: List[Dict[str, Any]] = []
        self.market_data_logs: List[Dict[str, Any]] = []
        self.prediction_logs: List[Dict[str, Any]] = []
        self.strategy_logs: List[Dict[str, Any]] = []
        self.trader_logs: List[Dict[str, Any]] = []
        
        # Alertes bas√©es sur les vraies donn√©es
        self.alerts: List[Dict[str, Any]] = []
        self.max_alerts = 100
        
        # Statistiques en temps r√©el bas√©es sur les vraies donn√©es
        self.pipeline_stats = {
            "total_executions": 0,
            "successful_executions": 0,
            "execution_rate": 0.0,
            "data_collection_success": 0,
            "prediction_accuracy": 0.0,
            "signal_generation_rate": 0.0,
            "trade_execution_rate": 0.0,
            "last_execution": None,
            "pipeline_health": "Unknown"
        }
        
        # Configuration des handlers pour recevoir les vraies donn√©es
        self.on_message(model=TradeRequest)(self.handle_trade_result)
        self.on_message(model=Prediction)(self.handle_prediction)
        self.on_message(model=Signal)(self.handle_signal)
        
        # T√¢che p√©riodique pour analyser la sant√© du pipeline
        self.health_check_task = self.on_interval(period=300)(self.analyze_pipeline_health)
        
        logger.info("LoggerAgent initialis√© pour monitoring du pipeline", 
                   monitoring_config=self.monitoring_config)
    
    async def handle_trade_result(self, ctx: Context, sender: str, msg: TradeRequest):
        """Traite les r√©sultats de trading pour le monitoring."""
        try:
            logger.info("üìä R√©sultat de trade re√ßu", 
                       trade_id=msg.trade_id,
                       symbol=msg.symbol,
                       status=msg.status.value,
                       pnl=msg.realized_pnl)
            
            # Enregistrement du trade
            trade_log = {
                "trade_id": msg.trade_id,
                "symbol": msg.symbol,
                "side": msg.side.value,
                "quantity": msg.quantity,
                "entry_price": msg.price,
                "exit_price": msg.price,  # √Ä ajuster selon le statut
                "status": msg.status.value,
                "realized_pnl": msg.realized_pnl or 0.0,
                "timestamp": msg.timestamp,
                "signal_data": msg.signal_data
            }
            
            self.trade_logs.append(trade_log)
            
            # Mise √† jour des statistiques
            await self._update_statistics(trade_log)
            
            # V√©rification des alertes
            await self._check_alerts()
            
            # Feedback au Predictor si n√©cessaire
            if msg.signal_data:
                await self._send_feedback_to_predictor(ctx, msg)
            
            logger.info("Trade enregistr√© et statistiques mises √† jour")
            
        except Exception as e:
            logger.error("‚ùå Erreur traitement r√©sultat trade", 
                        trade_id=msg.trade_id,
                        error=str(e))
    
    async def handle_prediction(self, ctx: Context, sender: str, msg: Prediction):
        """Enregistre les pr√©dictions pour analyse."""
        try:
            prediction_log = {
                "symbol": msg.symbol,
                "direction_prob": msg.direction_prob,
                "confidence": msg.confidence,
                "volatility": msg.volatility,
                "model_name": msg.model_name,
                "features_used": msg.features_used,
                "timestamp": msg.timestamp
            }
            
            self.prediction_logs.append(prediction_log)
            
            # Limiter la taille des logs
            if len(self.prediction_logs) > 1000:
                self.prediction_logs = self.prediction_logs[-1000:]
            
            logger.debug("Pr√©diction enregistr√©e", symbol=msg.symbol)
            
        except Exception as e:
            logger.error("Erreur enregistrement pr√©diction", error=str(e))
    
    async def handle_signal(self, ctx: Context, sender: str, msg: Signal):
        """Enregistre les signaux pour analyse."""
        try:
            signal_log = {
                "symbol": msg.symbol,
                "signal_type": msg.signal_type.value,
                "confidence": msg.confidence,
                "price": msg.price,
                "position_size": msg.position_size,
                "stop_loss": msg.stop_loss,
                "take_profit": msg.take_profit,
                "timestamp": msg.timestamp
            }
            
            self.signal_logs.append(signal_log)
            
            # Limiter la taille des logs
            if len(self.signal_logs) > 1000:
                self.signal_logs = self.signal_logs[-1000:]
            
            logger.debug("Signal enregistr√©", 
                        symbol=msg.symbol,
                        signal_type=msg.signal_type.value)
            
        except Exception as e:
            logger.error("Erreur enregistrement signal", error=str(e))
    
    async def _update_pipeline_statistics(self, data: Dict[str, Any]):
        """Met √† jour les statistiques du pipeline bas√©es sur les vraies donn√©es."""
        try:
            # Mise √† jour des compteurs d'ex√©cution
            self.pipeline_stats["total_executions"] += 1
            
            # V√©rifier la qualit√© des donn√©es collect√©es
            if data.get("price") and data.get("symbol"):
                self.pipeline_stats["data_collection_success"] += 1
            
            # V√©rifier la qualit√© des pr√©dictions
            if data.get("prediction") and data.get("prediction", {}).get("confidence", 0) > 0:
                self.pipeline_stats["prediction_accuracy"] += 1
            
            # V√©rifier la g√©n√©ration de signaux
            if data.get("strategy_signal"):
                self.pipeline_stats["signal_generation_rate"] += 1
            
            # V√©rifier l'ex√©cution des trades
            if data.get("trade_execution"):
                self.pipeline_stats["trade_execution_rate"] += 1
            
            # Calculer les taux de succ√®s
            if self.pipeline_stats["total_executions"] > 0:
                self.pipeline_stats["execution_rate"] = (
                    self.pipeline_stats["data_collection_success"] / self.pipeline_stats["total_executions"]
                )
            
            # Mise √† jour du timestamp de derni√®re ex√©cution
            self.pipeline_stats["last_execution"] = data.get("timestamp", datetime.utcnow())
            
            # √âvaluer la sant√© du pipeline
            await self._evaluate_pipeline_health()
            
            logger.info("Statistiques du pipeline mises √† jour", 
                       total_executions=self.pipeline_stats["total_executions"],
                       execution_rate=self.pipeline_stats["execution_rate"],
                       pipeline_health=self.pipeline_stats["pipeline_health"])
            
        except Exception as e:
            logger.error("Erreur mise √† jour statistiques pipeline", error=str(e))
    
    async def _calculate_drawdown(self):
        """Calcule le drawdown actuel et maximum."""
        try:
            if len(self.trade_logs) < 2:
                return
            
            # Calcul du drawdown
            cumulative_pnl = 0.0
            peak_pnl = 0.0
            current_drawdown = 0.0
            max_drawdown = 0.0
            
            for trade in self.trade_logs:
                cumulative_pnl += trade["realized_pnl"]
                
                if cumulative_pnl > peak_pnl:
                    peak_pnl = cumulative_pnl
                
                current_drawdown = peak_pnl - cumulative_pnl
                
                if current_drawdown > max_drawdown:
                    max_drawdown = current_drawdown
            
            self.stats["current_drawdown"] = current_drawdown
            self.stats["max_drawdown"] = max_drawdown
            
        except Exception as e:
            logger.error("Erreur calcul drawdown", error=str(e))
    
    async def _check_alerts(self):
        """V√©rifie et g√©n√®re des alertes si n√©cessaire."""
        try:
            # Alerte P&L n√©gatif
            if self.stats["total_pnl"] < self.monitoring_config["alert_threshold_pnl"]:
                alert = {
                    "type": "pnl_alert",
                    "message": f"P&L total n√©gatif: ${self.stats['total_pnl']:.2f}",
                    "severity": "high",
                    "timestamp": datetime.utcnow()
                }
                self._add_alert(alert)
            
            # Alerte win rate faible
            if self.stats["win_rate"] < self.monitoring_config["alert_threshold_winrate"]:
                alert = {
                    "type": "winrate_alert",
                    "message": f"Win rate faible: {self.stats['win_rate']*100:.1f}%",
                    "severity": "medium",
                    "timestamp": datetime.utcnow()
                }
                self._add_alert(alert)
            
            # Alerte drawdown √©lev√©
            if self.stats["current_drawdown"] > 500:  # 500 USD
                alert = {
                    "type": "drawdown_alert",
                    "message": f"Drawdown √©lev√©: ${self.stats['current_drawdown']:.2f}",
                    "severity": "high",
                    "timestamp": datetime.utcnow()
                }
                self._add_alert(alert)
            
        except Exception as e:
            logger.error("Erreur v√©rification alertes", error=str(e))
    
    def _add_alert(self, alert: Dict[str, Any]):
        """Ajoute une alerte √† la liste."""
        self.alerts.append(alert)
        
        # Limiter le nombre d'alertes
        if len(self.alerts) > self.max_alerts:
            self.alerts = self.alerts[-self.max_alerts:]
        
        logger.warning("Alerte g√©n√©r√©e", 
                      type=alert["type"],
                      message=alert["message"],
                      severity=alert["severity"])
    
    async def _send_feedback_to_predictor(self, ctx: Context, trade: TradeRequest):
        """Envoie un feedback au Predictor pour am√©liorer le mod√®le."""
        try:
            # Analyse de la performance de la pr√©diction
            if trade.signal_data:
                signal = trade.signal_data
                prediction_accuracy = self._calculate_prediction_accuracy(signal, trade)
                
                # Feedback bas√© sur l'accuracy
                feedback = {
                    "symbol": trade.symbol,
                    "prediction_accuracy": prediction_accuracy,
                    "actual_pnl": trade.realized_pnl or 0.0,
                    "expected_direction": signal.get("signal_type"),
                    "actual_direction": "BUY" if trade.realized_pnl > 0 else "SELL",
                    "timestamp": datetime.utcnow()
                }
                
                # Envoi au Predictor (adresse √† configurer)
                predictor_address = "agent1q2kxac3lxe4f9m9h2p9jwzqrv2y6s8ll0ctus7"
                
                await ctx.send(predictor_address, feedback)
                
                logger.info("Feedback envoy√© au Predictor", 
                           symbol=trade.symbol,
                           accuracy=prediction_accuracy)
            
        except Exception as e:
            logger.error("Erreur envoi feedback", error=str(e))
    
    def _calculate_prediction_accuracy(self, signal: Dict[str, Any], trade: TradeRequest) -> float:
        """Calcule l'accuracy de la pr√©diction."""
        try:
            # Logique simple : si le P&L est positif, la pr√©diction √©tait correcte
            if trade.realized_pnl and trade.realized_pnl > 0:
                return 1.0
            elif trade.realized_pnl and trade.realized_pnl < 0:
                return 0.0
            else:
                return 0.5  # Neutre si P&L = 0
            
        except Exception as e:
            logger.error("Erreur calcul accuracy", error=str(e))
            return 0.5
    
    def get_performance_report(self) -> Dict[str, Any]:
        """G√©n√®re un rapport de performance complet."""
        try:
            # Calculs suppl√©mentaires
            avg_trade_pnl = (
                self.stats["total_pnl"] / self.stats["total_trades"]
                if self.stats["total_trades"] > 0 else 0.0
            )
            
            # Performance par symbole
            symbol_performance = {}
            for trade in self.trade_logs:
                symbol = trade["symbol"]
                if symbol not in symbol_performance:
                    symbol_performance[symbol] = {
                        "trades": 0,
                        "pnl": 0.0,
                        "wins": 0
                    }
                
                symbol_performance[symbol]["trades"] += 1
                symbol_performance[symbol]["pnl"] += trade["realized_pnl"]
                if trade["realized_pnl"] > 0:
                    symbol_performance[symbol]["wins"] += 1
            
            # Calcul des win rates par symbole
            for symbol in symbol_performance:
                perf = symbol_performance[symbol]
                perf["win_rate"] = (
                    perf["wins"] / perf["trades"] * 100
                    if perf["trades"] > 0 else 0.0
                )
            
            return {
                "summary": {
                    "total_trades": self.stats["total_trades"],
                    "successful_trades": self.stats["successful_trades"],
                    "win_rate": round(self.stats["win_rate"] * 100, 2),
                    "total_pnl": round(self.stats["total_pnl"], 2),
                    "avg_trade_pnl": round(avg_trade_pnl, 2),
                    "best_trade": round(self.stats["best_trade"], 2),
                    "worst_trade": round(self.stats["worst_trade"], 2),
                    "current_drawdown": round(self.stats["current_drawdown"], 2),
                    "max_drawdown": round(self.stats["max_drawdown"], 2)
                },
                "symbol_performance": symbol_performance,
                "recent_alerts": self.alerts[-10:],  # 10 derni√®res alertes
                "generated_at": datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            logger.error("Erreur g√©n√©ration rapport", error=str(e))
            return {}
    
    async def _evaluate_pipeline_health(self):
        """√âvalue la sant√© globale du pipeline bas√©e sur les vraies donn√©es."""
        try:
            if self.pipeline_stats["total_executions"] == 0:
                self.pipeline_stats["pipeline_health"] = "Unknown"
                return
            
            # Calculer le score de sant√© (0-100)
            health_score = 0
            
            # Donn√©es de march√© (30% du score)
            data_score = (self.pipeline_stats["data_collection_success"] / self.pipeline_stats["total_executions"]) * 30
            health_score += data_score
            
            # Pr√©dictions (25% du score)
            if self.pipeline_stats["prediction_accuracy"] > 0:
                prediction_score = (self.pipeline_stats["prediction_accuracy"] / self.pipeline_stats["total_executions"]) * 25
                health_score += prediction_score
            
            # Signaux (25% du score)
            if self.pipeline_stats["signal_generation_rate"] > 0:
                signal_score = (self.pipeline_stats["signal_generation_rate"] / self.pipeline_stats["total_executions"]) * 25
                health_score += signal_score
            
            # Trades (20% du score)
            if self.pipeline_stats["trade_execution_rate"] > 0:
                trade_score = (self.pipeline_stats["trade_execution_rate"] / self.pipeline_stats["total_executions"]) * 20
                health_score += trade_score
            
            # D√©finir la sant√© du pipeline
            if health_score >= 80:
                self.pipeline_stats["pipeline_health"] = "Excellent"
            elif health_score >= 60:
                self.pipeline_stats["pipeline_health"] = "Good"
            elif health_score >= 40:
                self.pipeline_stats["pipeline_health"] = "Fair"
            else:
                self.pipeline_stats["pipeline_health"] = "Poor"
            
            # V√©rifier les alertes
            await self._check_pipeline_alerts(health_score)
            
            logger.info("Sant√© du pipeline √©valu√©e", 
                       health_score=round(health_score, 1),
                       pipeline_health=self.pipeline_stats["pipeline_health"])
            
        except Exception as e:
            logger.error("Erreur √©valuation sant√© pipeline", error=str(e))
    
    async def _check_pipeline_alerts(self, health_score: float):
        """V√©rifie et g√©n√®re des alertes bas√©es sur la sant√© du pipeline."""
        try:
            # Alerte si le taux d'ex√©cution est faible
            if self.pipeline_stats["execution_rate"] < self.monitoring_config["alert_threshold_execution_rate"]:
                alert = {
                    "type": "LOW_EXECUTION_RATE",
                    "message": f"Taux d'ex√©cution faible: {self.pipeline_stats['execution_rate']:.1%}",
                    "severity": "WARNING",
                    "timestamp": datetime.utcnow().isoformat(),
                    "recommendation": "V√©rifier la connectivit√© des agents et la qualit√© des donn√©es"
                }
                self._add_alert(alert)
            
            # Alerte si la sant√© globale est mauvaise
            if health_score < 40:
                alert = {
                    "type": "POOR_PIPELINE_HEALTH",
                    "message": f"Sant√© du pipeline d√©grad√©e: {self.pipeline_stats['pipeline_health']}",
                    "severity": "CRITICAL",
                    "timestamp": datetime.utcnow().isoformat(),
                    "recommendation": "Arr√™ter le pipeline et diagnostiquer les probl√®mes"
                }
                self._add_alert(alert)
            
            # Alerte si pas d'ex√©cution r√©cente
            if (self.pipeline_stats["last_execution"] and 
                (datetime.utcnow() - self.pipeline_stats["last_execution"]).total_seconds() > 300):
                alert = {
                    "type": "NO_RECENT_EXECUTION",
                    "message": "Aucune ex√©cution du pipeline depuis plus de 5 minutes",
                    "severity": "WARNING",
                    "timestamp": datetime.utcnow().isoformat(),
                    "recommendation": "V√©rifier que le pipeline est actif"
                }
                self._add_alert(alert)
                
        except Exception as e:
            logger.error("Erreur v√©rification alertes pipeline", error=str(e))
    
    def _add_alert(self, alert: Dict[str, Any]):
        """Ajoute une alerte √† la liste."""
        if len(self.alerts) >= self.max_alerts:
            self.alerts.pop(0)  # Supprimer la plus ancienne
        self.alerts.append(alert)
    
    async def analyze_pipeline_health(self, ctx: Context):
        """Analyse p√©riodique de la sant√© du pipeline."""
        try:
            logger.info("üîç Analyse de la sant√© du pipeline...")
            
            # G√©n√©rer un rapport de sant√©
            health_report = {
                "timestamp": datetime.utcnow().isoformat(),
                "pipeline_stats": self.pipeline_stats,
                "recent_alerts": self.alerts[-5:] if self.alerts else [],
                "recommendations": self._generate_recommendations()
            }
            
            logger.info("üìä Rapport de sant√© du pipeline g√©n√©r√©", 
                       health_score=self.pipeline_stats["pipeline_health"],
                       total_alerts=len(self.alerts))
            
        except Exception as e:
            logger.error("‚ùå Erreur analyse sant√© pipeline", error=str(e))
    
    def _generate_recommendations(self) -> List[str]:
        """G√©n√®re des recommandations bas√©es sur l'√©tat du pipeline."""
        recommendations = []
        
        if self.pipeline_stats["execution_rate"] < 0.7:
            recommendations.append("Am√©liorer la qualit√© des donn√©es de march√©")
        
        if self.pipeline_stats["prediction_accuracy"] < 0.5:
            recommendations.append("Optimiser les mod√®les de pr√©diction")
        
        if self.pipeline_stats["signal_generation_rate"] < 0.6:
            recommendations.append("Revoir la logique de g√©n√©ration de signaux")
        
        if not recommendations:
            recommendations.append("Pipeline fonctionne correctement")
        
        return recommendations
    
    async def run(self):
        """D√©marre l'agent Logger."""
        logger.info("üöÄ D√©marrage du LoggerAgent...")
        
        # Financement de l'agent si n√©cessaire
        await fund_agent_if_low(self.wallet.address())
        
        # D√©marrage de l'agent
        await super().run()

if __name__ == "__main__":
    agent = LoggerAgent()
    asyncio.run(agent.run())

#!/usr/bin/env python3
"""
Pipeline Manager - Orchestration s√©quentielle des agents de trading
"""

import asyncio
import structlog
import threading
import time
import requests
from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
from enum import Enum

from ..agents.trading.data_collector import DataCollectorAgent
from ..agents.trading.news_collector import NewsCollectorAgent
from ..agents.trading.data_aggregator import DataAggregatorAgent
from ..agents.trading.predictor import PredictorAgent
from ..agents.trading.strategy import StrategyAgent
from ..agents.trading.trader import TraderAgent
from ..agents.trading.logger import LoggerAgent

logger = structlog.get_logger(__name__)

class AgentStatus(Enum):
    """Statuts possibles d'un agent."""
    STOPPED = "stopped"
    RUNNING = "running"
    ERROR = "error"
    PROCESSING = "processing"

@dataclass
class AgentInfo:
    """Informations sur un agent."""
    name: str
    status: AgentStatus
    last_execution: Optional[datetime] = None
    execution_count: int = 0
    error_count: int = 0
    last_error: Optional[str] = None
    processing_time_ms: Optional[int] = None

@dataclass
class PipelineData:
    """Donn√©es qui passent entre les agents."""
    timestamp: datetime
    symbol: str
    price: float
    volume: float
    prediction: Optional[Dict[str, Any]] = None
    strategy_signal: Optional[Dict[str, Any]] = None
    trade_execution: Optional[Dict[str, Any]] = None
    metadata: Optional[Dict[str, Any]] = None

class PipelineManager:
    """Gestionnaire du pipeline s√©quentiel des agents."""
    
    def __init__(self):
        self.agents: Dict[str, Any] = {}
        self.agent_status: Dict[str, AgentInfo] = {}
        self.pipeline_data: List[PipelineData] = []
        self.is_running = False
        self.execution_interval = 60  # secondes
        self.max_pipeline_data = 1000
        self.pipeline_thread = None
        self.stop_event = threading.Event()
        
        # Initialisation des agents
        self._init_agents()
        
    def _init_agents(self):
        """Initialise tous les agents du pipeline."""
        try:
            logger.info("üöÄ Initialisation des agents du pipeline...")
            
            # Cr√©ation des agents dans l'ordre du pipeline
            self.agents = {
                "data_collector": DataCollectorAgent(),
                "news_collector": NewsCollectorAgent(),
                "data_aggregator": DataAggregatorAgent(),
                "predictor": PredictorAgent(),
                "strategy": StrategyAgent(),
                "trader": TraderAgent(),
                "logger": LoggerAgent()
            }
            
            # Initialisation des statuts
            for name in self.agents.keys():
                self.agent_status[name] = AgentInfo(
                    name=name,
                    status=AgentStatus.STOPPED
                )
            
            logger.info("‚úÖ Tous les agents initialis√©s", 
                       agents=list(self.agents.keys()))
            
        except Exception as e:
            logger.error("‚ùå Erreur initialisation agents", error=str(e))
            raise
    
    async def _start_all_agents(self):
        """D√©marre tous les agents uAgent."""
        try:
            logger.info("üöÄ D√©marrage des agents uAgent...")
            
            # Pour l'instant, on simule le d√©marrage des agents
            # car les agents uAgent ont besoin d'un contexte asyncio appropri√©
            # qui n'est pas disponible dans Flask
            
            # Marquer tous les agents comme running
            self.agent_status["data_collector"].status = AgentStatus.RUNNING
            self.agent_status["news_collector"].status = AgentStatus.RUNNING
            self.agent_status["data_aggregator"].status = AgentStatus.RUNNING
            self.agent_status["predictor"].status = AgentStatus.RUNNING
            self.agent_status["strategy"].status = AgentStatus.RUNNING
            self.agent_status["trader"].status = AgentStatus.RUNNING
            self.agent_status["logger"].status = AgentStatus.RUNNING
            
            logger.info("‚úÖ Tous les agents marqu√©s comme running (simulation)")
            
            # D√©marrer la boucle de simulation des agents
            self._start_agent_simulation()
            
        except Exception as e:
            logger.error("‚ùå Erreur d√©marrage agents uAgent", error=str(e))
            raise
    
    def _start_agent_simulation(self):
        """La simulation est d√©sactiv√©e - utilise maintenant le vrai pipeline avec API calls."""
        logger.info("‚úÖ Simulation d√©sactiv√©e - utilise le vrai pipeline avec API calls")
        # Ne pas d√©marrer de thread de simulation, le vrai pipeline est g√©r√© par _pipeline_loop_thread
    
    async def _stop_all_agents(self):
        """Arr√™te tous les agents uAgent."""
        try:
            logger.info("üõë Arr√™t des agents uAgent...")
            
            # Marquer tous les agents comme stopped
            for name in self.agent_status.keys():
                self.agent_status[name].status = AgentStatus.STOPPED
                logger.info(f"‚úÖ {name} arr√™t√©")
            
            logger.info("‚úÖ Tous les agents uAgent arr√™t√©s")
            
        except Exception as e:
            logger.error("‚ùå Erreur arr√™t agents uAgent", error=str(e))
            raise
    
    def get_pipeline_data(self):
        """R√©cup√®re les donn√©es du pipeline."""
        return self.pipeline_data
    
    def get_agent_metrics(self):
        """R√©cup√®re les m√©triques des agents."""
        total_executions = sum(agent.execution_count for agent in self.agent_status.values())
        total_errors = sum(agent.error_count for agent in self.agent_status.values())
        success_rate = ((total_executions - total_errors) / total_executions * 100) if total_executions > 0 else 0
        
        # Compter les pr√©dictions et signaux de mani√®re s√©curis√©e
        predictions_count = 0
        signals_count = 0
        
        for d in self.pipeline_data:
            try:
                if hasattr(d, 'prediction') and d.prediction:
                    predictions_count += 1
                elif isinstance(d, dict) and d.get('prediction'):
                    predictions_count += 1
                    
                if hasattr(d, 'strategy_signal') and d.strategy_signal:
                    signals_count += 1
                elif isinstance(d, dict) and d.get('strategy_signal'):
                    signals_count += 1
            except Exception:
                continue
        
        return {
            "total_executions": total_executions,
            "total_errors": total_errors,
            "success_rate": success_rate,
            "predictions_count": predictions_count,
            "signals_count": signals_count
        }
    
    def _generate_ai_prediction_sync(self, market_data: Dict[str, Any]) -> Dict[str, Any]:
        """G√©n√®re une pr√©diction avec IA ASI:One (version synchrone)."""
        try:
            # Importer les modules n√©cessaires
            import asyncio
            from ..utils.asi_model import ASIOneModel
            from ..utils.technical_indicators import TechnicalIndicators
            
            # Initialiser le mod√®le ASI:One
            asi_model = ASIOneModel(model="asi1-mini")
            
            # Cr√©er des donn√©es de prix fictives pour les indicateurs
            current_price = market_data.get("price", 50000)
            price_history = [current_price * (1 + i * 0.001) for i in range(-19, 1)]  # 20 points
            
            # Calculer les indicateurs techniques
            technical_indicators = TechnicalIndicators.calculate_all_indicators(price_history)
            
            # G√©n√©rer la pr√©diction avec ASI:One (mode synchrone)
            try:
                # Cr√©er un nouvel event loop pour l'appel async
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                prediction_result = loop.run_until_complete(
                    asi_model.predict_price_direction(
                        price_history=price_history,
                        volume_history=[market_data.get("volume", 1000000)] * 20,
                        technical_indicators=technical_indicators,
                        symbol=market_data.get("symbol", "BTC/USD")
                    )
                )
                
                loop.close()
                
                # Convertir la pr√©diction au format attendu
                direction = "UP" if prediction_result["direction_probability"] > 0.5 else "DOWN"
                confidence = prediction_result["confidence"]
                price_target = current_price * (1.02 if direction == "UP" else 0.98)
                
                logger.info("ü§ñ Pr√©diction IA ASI:One g√©n√©r√©e", 
                           model=prediction_result["model_name"],
                           direction_prob=prediction_result["direction_probability"],
                           confidence=confidence,
                           simulation_mode=asi_model.simulation_mode)
                
                return {
                    "direction": direction,
                    "confidence": confidence,
                    "price_target": price_target,
                    "direction_probability": prediction_result["direction_probability"],
                    "model_name": prediction_result["model_name"],
                    "technical_indicators": technical_indicators,
                    "timestamp": datetime.utcnow()
                }
                
            except Exception as e:
                logger.warning("Fallback vers simulation IA", error=str(e))
                return self._generate_fallback_prediction(market_data, technical_indicators)
                
        except Exception as e:
            logger.error("Erreur g√©n√©ration pr√©diction IA", error=str(e))
            # Fallback simple
            return {
                "direction": "UP",
                "confidence": 0.65,
                "price_target": market_data.get("price", 50000) * 1.01,
                "model_name": "FALLBACK",
                "timestamp": datetime.utcnow()
            }
    
    def _generate_fallback_prediction(self, market_data: Dict[str, Any], technical_indicators: Dict[str, float]) -> Dict[str, Any]:
        """G√©n√®re une pr√©diction de fallback bas√©e sur les indicateurs techniques."""
        import random
        
        current_price = market_data.get("price", 50000)
        
        # Logique bas√©e sur RSI
        base_prob = 0.5
        rsi = technical_indicators.get("rsi", 50)
        
        if rsi < 30:  # Oversold - probabilit√© de hausse
            base_prob = 0.7
        elif rsi > 70:  # Overbought - probabilit√© de baisse
            base_prob = 0.3
        
        # Ajouter du bruit r√©aliste
        direction_prob = base_prob + random.uniform(-0.1, 0.1)
        direction_prob = max(0.1, min(0.9, direction_prob))
        
        direction = "UP" if direction_prob > 0.5 else "DOWN"
        confidence = random.uniform(0.6, 0.85)
        price_target = current_price * (1.02 if direction == "UP" else 0.98)
        
        logger.info("üìä Pr√©diction fallback avec indicateurs techniques", 
                   rsi=rsi,
                   direction_prob=direction_prob,
                   confidence=confidence)
        
        return {
            "direction": direction,
            "confidence": confidence,
            "price_target": price_target,
            "direction_probability": direction_prob,
            "model_name": "TECHNICAL-INDICATORS-FALLBACK",
            "technical_indicators": technical_indicators,
            "timestamp": datetime.utcnow()
        }
    
    def _collect_real_market_data_sync(self):
        """Collecte les vraies donn√©es de march√© via CoinGecko API (version synchrone)."""
        try:
            import requests
            import random
            
            # Appel √† l'API CoinGecko
            url = "https://api.coingecko.com/api/v3/simple/price"
            params = {
                'ids': 'bitcoin',
                'vs_currencies': 'usd',
                'include_24hr_vol': 'true',
                'include_24hr_change': 'true'
            }
            
            logger.info("üåê Appel API CoinGecko...")
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                bitcoin_data = data.get('bitcoin', {})
                
                market_data = {
                    "symbol": "BTC/USD",
                    "price": float(bitcoin_data.get('usd', 50000)),
                    "volume": float(bitcoin_data.get('usd_24h_vol', 1000000)),
                    "change_24h": float(bitcoin_data.get('usd_24h_change', 0)),
                    "timestamp": datetime.utcnow(),
                    "source": "CoinGecko"
                }
                
                logger.info(f"‚úÖ Donn√©es CoinGecko r√©cup√©r√©es: Prix=${market_data['price']:,.2f}, Volume=${market_data['volume']:,.0f}")
                return market_data
            else:
                logger.warning(f"‚ö†Ô∏è Erreur API CoinGecko: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur collecte donn√©es CoinGecko: {str(e)}")
        
        # Fallback avec des donn√©es r√©alistes mais al√©atoires
        fallback_data = {
            "symbol": "BTC/USD",
            "price": float(random.randint(45000, 55000)),
            "volume": float(random.randint(1000000, 5000000)),
            "change_24h": float(random.uniform(-5, 5)),
            "timestamp": datetime.utcnow(),
            "source": "Fallback"
        }
        logger.info(f"üìä Utilisation donn√©es fallback: Prix=${fallback_data['price']:,.2f}")
        return fallback_data
    
    async def start_pipeline(self):
        """D√©marre le pipeline complet."""
        if self.is_running:
            logger.warning("‚ö†Ô∏è Pipeline d√©j√† en cours d'ex√©cution")
            return False
        
        try:
            logger.info("üöÄ D√©marrage du pipeline s√©quentiel...")
            self.is_running = True
            self.stop_event.clear()
            
            # D√©marrer tous les agents uAgent
            await self._start_all_agents()
            
            # D√©marrer la t√¢che p√©riodique dans un thread s√©par√©
            self.pipeline_thread = threading.Thread(target=self._pipeline_loop_thread, daemon=True)
            self.pipeline_thread.start()
            
            logger.info("‚úÖ Pipeline d√©marr√© avec succ√®s")
            return True
            
        except Exception as e:
            logger.error("‚ùå Erreur d√©marrage pipeline", error=str(e))
            self.is_running = False
            return False
    
    async def stop_pipeline(self):
        """Arr√™te le pipeline complet."""
        if not self.is_running:
            logger.warning("‚ö†Ô∏è Pipeline d√©j√† arr√™t√©")
            return False
        
        try:
            logger.info("üõë Arr√™t du pipeline...")
            self.is_running = False
            self.stop_event.set()
            
            # Attendre que le thread se termine
            if self.pipeline_thread and self.pipeline_thread.is_alive():
                self.pipeline_thread.join(timeout=5)
            
            # Arr√™ter tous les agents
            await self._stop_all_agents()
            
            logger.info("‚úÖ Pipeline arr√™t√©")
            return True
            
        except Exception as e:
            logger.error("‚ùå Erreur arr√™t pipeline", error=str(e))
            return False
    
    def _pipeline_loop_thread(self):
        """Boucle principale du pipeline dans un thread s√©par√©."""
        logger.info("üîÑ D√©marrage de la boucle pipeline dans le thread")
        
        while self.is_running and not self.stop_event.is_set():
            try:
                start_time = datetime.utcnow()
                logger.info("üîÑ D√©but cycle pipeline", timestamp=start_time)
                
                # Ex√©cution s√©quentielle des agents (version synchrone)
                pipeline_data = self._execute_pipeline_sequence_sync()
                
                if pipeline_data:
                    self.pipeline_data.append(pipeline_data)
                    # Garder seulement les derni√®res donn√©es
                    if len(self.pipeline_data) > self.max_pipeline_data:
                        self.pipeline_data = self.pipeline_data[-self.max_pipeline_data:]
                
                # Calculer le temps d'ex√©cution
                execution_time = (datetime.utcnow() - start_time).total_seconds()
                logger.info("‚úÖ Cycle pipeline termin√©", 
                           execution_time_seconds=execution_time,
                           pipeline_data_count=len(self.pipeline_data))
                
                # Attendre le prochain cycle (version thread-safe)
                for _ in range(self.execution_interval):
                    if self.stop_event.is_set():
                        break
                    time.sleep(1)
                
            except Exception as e:
                logger.error("‚ùå Erreur dans la boucle pipeline", error=str(e))
                # Attendre 10 secondes avant de r√©essayer
                for _ in range(10):
                    if self.stop_event.is_set():
                        break
                    time.sleep(1)
        
        logger.info("üõë Boucle pipeline termin√©e")
    
    async def _pipeline_loop(self):
        """Boucle principale du pipeline (version asynchrone pour compatibilit√©)."""
        # Cette m√©thode est maintenant d√©pr√©ci√©e, utilisez _pipeline_loop_thread
        logger.warning("‚ö†Ô∏è _pipeline_loop est d√©pr√©ci√©, utilisez _pipeline_loop_thread")
        return await self._execute_pipeline_sequence()
    
    async def _execute_pipeline_sequence(self) -> Optional[PipelineData]:
        """Ex√©cute la s√©quence compl√®te des agents."""
        try:
            # 1. DataCollector - Collecte des donn√©es
            logger.info("üìä √âtape 1: DataCollector")
            market_data = await self._execute_data_collector()
            if not market_data:
                logger.warning("‚ö†Ô∏è Aucune donn√©e collect√©e, arr√™t du pipeline")
                return None
            
            # 2. Predictor - G√©n√©ration de pr√©dictions
            logger.info("üîÆ √âtape 2: Predictor")
            prediction = await self._execute_predictor(market_data)
            
            # 3. Strategy - Analyse et signaux
            logger.info("üìà √âtape 3: Strategy")
            strategy_signal = await self._execute_strategy(market_data, prediction)
            
            # 4. Trader - Ex√©cution des trades
            logger.info("üí∞ √âtape 4: Trader")
            trade_execution = await self._execute_trader(market_data, strategy_signal)
            
            # 5. Logger - Monitoring et logging
            logger.info("üìù √âtape 5: Logger")
            await self._execute_logger(market_data, prediction, strategy_signal, trade_execution)
            
            # Cr√©er les donn√©es du pipeline
            pipeline_data = PipelineData(
                timestamp=datetime.utcnow(),
                symbol=market_data.get("symbol", "UNKNOWN"),
                price=market_data.get("price", 0.0),
                volume=market_data.get("volume", 0.0),
                prediction=prediction,
                strategy_signal=strategy_signal,
                trade_execution=trade_execution,
                metadata={
                    "pipeline_version": "1.0.0",
                    "execution_id": f"exec_{datetime.utcnow().timestamp()}"
                }
            )
            
            return pipeline_data
            
        except Exception as e:
                    logger.error("‚ùå Erreur dans la s√©quence pipeline", error=str(e))
        return None
    
    def _execute_pipeline_sequence_sync(self) -> Optional[PipelineData]:
        """Ex√©cute la s√©quence compl√®te des agents (version synchrone pour le thread)."""
        try:
            # 1. DataCollector - Collecte des donn√©es
            logger.info("üìä √âtape 1: DataCollector")
            market_data = self._execute_data_collector_sync()
            if not market_data:
                logger.warning("‚ö†Ô∏è Aucune donn√©e collect√©e, arr√™t du pipeline")
                return None
            
            # 2. Predictor - G√©n√©ration de pr√©dictions
            logger.info("üîÆ √âtape 2: Predictor")
            prediction = self._execute_predictor_sync(market_data)
            
            # 3. Strategy - Analyse et signaux
            logger.info("üìà √âtape 3: Strategy")
            strategy_signal = self._execute_strategy_sync(market_data, prediction)
            
            # 4. Trader - Ex√©cution des trades
            logger.info("üí∞ √âtape 4: Trader")
            trade_execution = self._execute_trader_sync(market_data, strategy_signal)
            
            # 5. Logger - Monitoring et logging
            logger.info("üìù √âtape 5: Logger")
            self._execute_logger_sync(market_data, prediction, strategy_signal, trade_execution)
            
            # Cr√©er les donn√©es du pipeline
            pipeline_data = PipelineData(
                timestamp=datetime.utcnow(),
                symbol=market_data.get("symbol", "UNKNOWN"),
                price=market_data.get("price", 0.0),
                volume=market_data.get("volume", 0.0),
                prediction=prediction,
                strategy_signal=strategy_signal,
                trade_execution=trade_execution,
                metadata={
                    "pipeline_version": "1.0.0",
                    "execution_id": f"exec_{datetime.utcnow().timestamp()}"
                }
            )
            
            return pipeline_data
            
        except Exception as e:
            logger.error("‚ùå Erreur dans la s√©quence pipeline synchrone", error=str(e))
            return None
    
    async def _execute_data_collector(self) -> Optional[Dict[str, Any]]:
        """Ex√©cute l'agent DataCollector."""
        agent_name = "data_collector"
        start_time = datetime.utcnow()
        
        try:
            self.agent_status[agent_name].status = AgentStatus.PROCESSING
            
            # Simuler la collecte de donn√©es (remplac√© par l'appel r√©el √† l'agent)
            market_data = {
                "symbol": "BTC/USD",
                "price": 108538.0,
                "volume": 1000000.0,
                "timestamp": datetime.utcnow(),
                "source": "CoinGecko"
            }
            
            # Mettre √† jour le statut
            self.agent_status[agent_name].status = AgentStatus.RUNNING
            self.agent_status[agent_name].last_execution = datetime.utcnow()
            self.agent_status[agent_name].execution_count += 1
            self.agent_status[agent_name].processing_time_ms = int((datetime.utcnow() - start_time).total_seconds() * 1000)
            
            logger.info("‚úÖ DataCollector ex√©cut√©", data=market_data)
            return market_data
            
        except Exception as e:
            self.agent_status[agent_name].status = AgentStatus.ERROR
            self.agent_status[agent_name].error_count += 1
            self.agent_status[agent_name].last_error = str(e)
            logger.error("‚ùå Erreur DataCollector", error=str(e))
            return None
    
    def _execute_data_collector_sync(self) -> Optional[Dict[str, Any]]:
        """Ex√©cute l'agent DataCollector (version synchrone)."""
        agent_name = "data_collector"
        start_time = datetime.utcnow()
        
        try:
            self.agent_status[agent_name].status = AgentStatus.PROCESSING
            
            # Vraie collecte de donn√©es via CoinGecko API
            market_data = self._collect_real_market_data_sync()
            if not market_data:
                logger.error("‚ùå Impossible de collecter les donn√©es de march√©")
                return None
            
            # Mettre √† jour le statut
            self.agent_status[agent_name].status = AgentStatus.RUNNING
            self.agent_status[agent_name].last_execution = datetime.utcnow()
            self.agent_status[agent_name].execution_count += 1
            self.agent_status[agent_name].processing_time_ms = int((datetime.utcnow() - start_time).total_seconds() * 1000)
            
            logger.info("‚úÖ DataCollector ex√©cut√© (sync)", data=market_data)
            return market_data
            
        except Exception as e:
            self.agent_status[agent_name].status = AgentStatus.ERROR
            self.agent_status[agent_name].error_count += 1
            self.agent_status[agent_name].last_error = str(e)
            logger.error("‚ùå Erreur DataCollector (sync)", error=str(e))
            return None
    
    async def _execute_predictor(self, market_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Ex√©cute l'agent Predictor."""
        agent_name = "predictor"
        start_time = datetime.utcnow()
        
        try:
            self.agent_status[agent_name].status = AgentStatus.PROCESSING
            
            # Simuler la pr√©diction (remplac√© par l'appel r√©el √† l'agent)
            prediction = {
                "direction": "UP",
                "confidence": 0.75,
                "price_target": market_data["price"] * 1.02,
                "timestamp": datetime.utcnow()
            }
            
            # Mettre √† jour le statut
            self.agent_status[agent_name].status = AgentStatus.RUNNING
            self.agent_status[agent_name].last_execution = datetime.utcnow()
            self.agent_status[agent_name].execution_count += 1
            self.agent_status[agent_name].processing_time_ms = int((datetime.utcnow() - start_time).total_seconds() * 1000)
            
            logger.info("‚úÖ Predictor ex√©cut√©", prediction=prediction)
            return prediction
            
        except Exception as e:
            self.agent_status[agent_name].status = AgentStatus.ERROR
            self.agent_status[agent_name].error_count += 1
            self.agent_status[agent_name].last_error = str(e)
            logger.error("‚ùå Erreur Predictor", error=str(e))
            return None
    
    def _execute_predictor_sync(self, market_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Ex√©cute l'agent Predictor avec IA ASI:One (version synchrone)."""
        agent_name = "predictor"
        start_time = datetime.utcnow()
        
        try:
            self.agent_status[agent_name].status = AgentStatus.PROCESSING
            
            # Utiliser le vrai Predictor avec IA ASI:One
            prediction = self._generate_ai_prediction_sync(market_data)
            
            # Mettre √† jour le statut
            self.agent_status[agent_name].status = AgentStatus.RUNNING
            self.agent_status[agent_name].last_execution = datetime.utcnow()
            self.agent_status[agent_name].execution_count += 1
            self.agent_status[agent_name].processing_time_ms = int((datetime.utcnow() - start_time).total_seconds() * 1000)
            
            logger.info("‚úÖ Predictor ex√©cut√© (sync) avec IA", prediction=prediction)
            return prediction
            
        except Exception as e:
            self.agent_status[agent_name].status = AgentStatus.ERROR
            self.agent_status[agent_name].error_count += 1
            self.agent_status[agent_name].last_error = str(e)
            logger.error("‚ùå Erreur Predictor (sync)", error=str(e))
            return None
    
    async def _execute_strategy(self, market_data: Dict[str, Any], prediction: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """Ex√©cute l'agent Strategy."""
        agent_name = "strategy"
        start_time = datetime.utcnow()
        
        try:
            self.agent_status[agent_name].status = AgentStatus.PROCESSING
            
            # Simuler la strat√©gie (remplac√© par l'appel r√©el √† l'agent)
            strategy_signal = {
                "action": "BUY" if prediction and prediction.get("direction") == "UP" else "HOLD",
                "confidence": prediction.get("confidence", 0.5) if prediction else 0.5,
                "position_size": 0.1,
                "stop_loss": market_data["price"] * 0.98,
                "take_profit": market_data["price"] * 1.05,
                "timestamp": datetime.utcnow()
            }
            
            # Mettre √† jour le statut
            self.agent_status[agent_name].status = AgentStatus.RUNNING
            self.agent_status[agent_name].last_execution = datetime.utcnow()
            self.agent_status[agent_name].execution_count += 1
            self.agent_status[agent_name].processing_time_ms = int((datetime.utcnow() - start_time).total_seconds() * 1000)
            
            logger.info("‚úÖ Strategy ex√©cut√©", signal=strategy_signal)
            return strategy_signal
            
        except Exception as e:
            self.agent_status[agent_name].status = AgentStatus.ERROR
            self.agent_status[agent_name].error_count += 1
            self.agent_status[agent_name].last_error = str(e)
            logger.error("‚ùå Erreur Strategy", error=str(e))
            return None
    
    def _execute_strategy_sync(self, market_data: Dict[str, Any], prediction: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """Ex√©cute l'agent Strategy (version synchrone)."""
        agent_name = "strategy"
        start_time = datetime.utcnow()
        
        try:
            self.agent_status[agent_name].status = AgentStatus.PROCESSING
            
            # Simuler la strat√©gie (remplac√© par l'appel r√©el √† l'agent)
            strategy_signal = {
                "action": "BUY" if prediction and prediction.get("direction") == "UP" else "HOLD",
                "confidence": prediction.get("confidence", 0.5) if prediction else 0.5,
                "position_size": 0.1,
                "stop_loss": market_data["price"] * 0.98,
                "take_profit": market_data["price"] * 1.05,
                "timestamp": datetime.utcnow()
            }
            
            # Mettre √† jour le statut
            self.agent_status[agent_name].status = AgentStatus.RUNNING
            self.agent_status[agent_name].last_execution = datetime.utcnow()
            self.agent_status[agent_name].execution_count += 1
            self.agent_status[agent_name].processing_time_ms = int((datetime.utcnow() - start_time).total_seconds() * 1000)
            
            logger.info("‚úÖ Strategy ex√©cut√© (sync)", signal=strategy_signal)
            return strategy_signal
            
        except Exception as e:
            self.agent_status[agent_name].status = AgentStatus.ERROR
            self.agent_status[agent_name].error_count += 1
            self.agent_status[agent_name].last_error = str(e)
            logger.error("‚ùå Erreur Strategy (sync)", error=str(e))
            return None
    
    async def _execute_trader(self, market_data: Dict[str, Any], strategy_signal: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """Ex√©cute l'agent Trader."""
        agent_name = "trader"
        start_time = datetime.utcnow()
        
        try:
            self.agent_status[agent_name].status = AgentStatus.PROCESSING
            
            # Simuler l'ex√©cution du trade (remplac√© par l'appel r√©el √† l'agent)
            trade_execution = None
            if strategy_signal and strategy_signal.get("action") != "HOLD":
                trade_execution = {
                    "trade_id": f"trade_{datetime.utcnow().timestamp()}",
                    "action": strategy_signal["action"],
                    "quantity": strategy_signal["position_size"],
                    "price": market_data["price"],
                    "status": "FILLED",
                    "timestamp": datetime.utcnow()
                }
            
            # Mettre √† jour le statut
            self.agent_status[agent_name].status = AgentStatus.RUNNING
            self.agent_status[agent_name].last_execution = datetime.utcnow()
            self.agent_status[agent_name].execution_count += 1
            self.agent_status[agent_name].processing_time_ms = int((datetime.utcnow() - start_time).total_seconds() * 1000)
            
            logger.info("‚úÖ Trader ex√©cut√©", trade=trade_execution)
            return trade_execution
            
        except Exception as e:
            self.agent_status[agent_name].status = AgentStatus.ERROR
            self.agent_status[agent_name].error_count += 1
            self.agent_status[agent_name].last_error = str(e)
            logger.error("‚ùå Erreur Trader", error=str(e))
            return None
    
    def _execute_trader_sync(self, market_data: Dict[str, Any], strategy_signal: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """Ex√©cute l'agent Trader (version synchrone)."""
        agent_name = "trader"
        start_time = datetime.utcnow()
        
        try:
            self.agent_status[agent_name].status = AgentStatus.PROCESSING
            
            # Simuler l'ex√©cution du trade (remplac√© par l'appel r√©el √† l'agent)
            trade_execution = None
            if strategy_signal and strategy_signal.get("action") != "HOLD":
                trade_execution = {
                    "trade_id": f"trade_{datetime.utcnow().timestamp()}",
                    "action": strategy_signal["action"],
                    "quantity": strategy_signal["position_size"],
                    "price": market_data["price"],
                    "status": "FILLED",
                    "timestamp": datetime.utcnow()
                }
            
            # Mettre √† jour le statut
            self.agent_status[agent_name].status = AgentStatus.RUNNING
            self.agent_status[agent_name].last_execution = datetime.utcnow()
            self.agent_status[agent_name].execution_count += 1
            self.agent_status[agent_name].processing_time_ms = int((datetime.utcnow() - start_time).total_seconds() * 1000)
            
            logger.info("‚úÖ Trader ex√©cut√© (sync)", trade=trade_execution)
            return trade_execution
            
        except Exception as e:
            self.agent_status[agent_name].status = AgentStatus.ERROR
            self.agent_status[agent_name].error_count += 1
            self.agent_status[agent_name].last_error = str(e)
            logger.error("‚ùå Erreur Trader (sync)", error=str(e))
            return None
    
    async def _execute_logger(self, market_data: Dict[str, Any], prediction: Optional[Dict[str, Any]], 
                             strategy_signal: Optional[Dict[str, Any]], trade_execution: Optional[Dict[str, Any]]):
        """Ex√©cute l'agent Logger."""
        agent_name = "logger"
        start_time = datetime.utcnow()
        
        try:
            self.agent_status[agent_name].status = AgentStatus.PROCESSING
            
            # Simuler le logging (remplac√© par l'appel r√©el √† l'agent)
            log_entry = {
                "timestamp": datetime.utcnow(),
                "market_data": market_data,
                "prediction": prediction,
                "strategy_signal": strategy_signal,
                "trade_execution": trade_execution
            }
            
            # Mettre √† jour le statut
            self.agent_status[agent_name].status = AgentStatus.RUNNING
            self.agent_status[agent_name].last_execution = datetime.utcnow()
            self.agent_status[agent_name].execution_count += 1
            self.agent_status[agent_name].processing_time_ms = int((datetime.utcnow() - start_time).total_seconds() * 1000)
            
            logger.info("‚úÖ Logger ex√©cut√©", log_entry=log_entry)
            
        except Exception as e:
            self.agent_status[agent_name].status = AgentStatus.ERROR
            self.agent_status[agent_name].error_count += 1
            self.agent_status[agent_name].last_error = str(e)
            logger.error("‚ùå Erreur Logger", error=str(e))
    
    def _execute_logger_sync(self, market_data: Dict[str, Any], prediction: Optional[Dict[str, Any]], 
                            strategy_signal: Optional[Dict[str, Any]], trade_execution: Optional[Dict[str, Any]]):
        """Ex√©cute l'agent Logger (version synchrone)."""
        agent_name = "logger"
        start_time = datetime.utcnow()
        
        try:
            self.agent_status[agent_name].status = AgentStatus.PROCESSING
            
            # Simuler le logging (remplac√© par l'appel r√©el √† l'agent)
            log_entry = {
                "timestamp": datetime.utcnow(),
                "market_data": market_data,
                "prediction": prediction,
                "strategy_signal": strategy_signal,
                "trade_execution": trade_execution
            }
            
            # Mettre √† jour le statut
            self.agent_status[agent_name].status = AgentStatus.RUNNING
            self.agent_status[agent_name].last_execution = datetime.utcnow()
            self.agent_status[agent_name].execution_count += 1
            self.agent_status[agent_name].processing_time_ms = int((datetime.utcnow() - start_time).total_seconds() * 1000)
            
            logger.info("‚úÖ Logger ex√©cut√© (sync)", log_entry=log_entry)
            
        except Exception as e:
            self.agent_status[agent_name].status = AgentStatus.ERROR
            self.agent_status[agent_name].error_count += 1
            self.agent_status[agent_name].last_error = str(e)
            logger.error("‚ùå Erreur Logger (sync)", error=str(e))
    
    def get_pipeline_status(self) -> Dict[str, Any]:
        """Retourne le statut complet du pipeline."""
        # Convertir les agents en format s√©rialisable
        agents_dict = {}
        for name, status in self.agent_status.items():
            agent_dict = asdict(status)
            # Convertir l'enum AgentStatus en string
            agent_dict['status'] = status.status.value
            agents_dict[name] = agent_dict
        
        return {
            "is_running": self.is_running,
            "execution_interval": self.execution_interval,
            "agents": agents_dict,
            "pipeline_data_count": len(self.pipeline_data),
            "last_execution": max([status.last_execution for status in self.agent_status.values() if status.last_execution], default=None)
        }
    
    def get_pipeline_data(self, limit: int = 100) -> List[Dict[str, Any]]:
        """Retourne les derni√®res donn√©es du pipeline."""
        recent_data = self.pipeline_data[-limit:] if self.pipeline_data else []
        return [asdict(data) for data in recent_data]
    
    def get_agent_status(self, agent_name: str) -> Optional[Dict[str, Any]]:
        """Retourne le statut d'un agent sp√©cifique."""
        if agent_name in self.agent_status:
            agent_dict = asdict(self.agent_status[agent_name])
            # Convertir l'enum AgentStatus en string
            agent_dict['status'] = self.agent_status[agent_name].status.value
            return agent_dict
        return None

# Instance globale du pipeline manager
pipeline_manager = PipelineManager()

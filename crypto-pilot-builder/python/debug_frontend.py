#!/usr/bin/env python3
"""
Script de debug pour le probl√®me du bouton Analyser
"""

def debug_frontend_issue():
    """Debug du probl√®me du bouton Analyser"""
    print("üîç Debug du probl√®me du bouton Analyser")
    print("=" * 50)
    
    print("\nüìã Probl√®mes possibles identifi√©s:")
    
    print("\n1. üîê PROBL√àME D'AUTHENTIFICATION")
    print("   - L'utilisateur n'est pas connect√©")
    print("   - Le token JWT a expir√©")
    print("   - L'apiService n'envoie pas le token")
    
    print("\n2. üì° PROBL√àME D'API")
    print("   - L'endpoint /api/autowallet/analyze n'est pas accessible")
    print("   - Erreur dans la requ√™te HTTP")
    print("   - Probl√®me de format des donn√©es")
    
    print("\n3. üéØ PROBL√àME D'INTERFACE")
    print("   - La m√©thode analyzeNews n'est pas appel√©e")
    print("   - Erreur JavaScript dans la console")
    print("   - Probl√®me de gestion des erreurs")
    
    print("\nüîß SOLUTIONS √Ä ESSAYER:")
    
    print("\nA. V√©rifier l'authentification:")
    print("   1. Ouvrez la console du navigateur (F12)")
    print("   2. V√©rifiez que vous √™tes connect√©")
    print("   3. V√©rifiez le token JWT dans localStorage")
    print("   4. Cliquez sur le bouton Analyser")
    print("   5. Regardez les erreurs dans la console")
    
    print("\nB. V√©rifier le serveur:")
    print("   1. Assurez-vous que le serveur est d√©marr√©")
    print("   2. V√©rifiez les logs du serveur")
    print("   3. Testez l'endpoint manuellement")
    
    print("\nC. V√©rifier l'interface:")
    print("   1. V√©rifiez que les news se chargent")
    print("   2. V√©rifiez que le bouton Analyser est cliquable")
    print("   3. V√©rifiez les erreurs JavaScript")
    
    print("\nüì± COMMANDES DE TEST:")
    print("   # Test des endpoints")
    print("   python test_analyze_endpoint.py")
    print("   ")
    print("   # Test avec authentification")
    print("   python test_with_auth.py")
    print("   ")
    print("   # Debug de l'analyseur")
    print("   python debug_analyzer.py")

def check_common_issues():
    """V√©rifie les probl√®mes courants"""
    print("\nüö® PROBL√àMES COURANTS ET SOLUTIONS:")
    print("=" * 50)
    
    issues = [
        {
            "problem": "Bouton Analyser ne r√©pond pas",
            "cause": "Erreur JavaScript ou m√©thode non d√©finie",
            "solution": "V√©rifier la console du navigateur pour les erreurs"
        },
        {
            "problem": "Erreur 401 (Unauthorized)",
            "cause": "Utilisateur non connect√© ou token expir√©",
            "solution": "Se reconnecter ou rafra√Æchir la page"
        },
        {
            "problem": "Erreur 500 (Server Error)",
            "cause": "Probl√®me c√¥t√© serveur",
            "solution": "V√©rifier les logs du serveur Python"
        },
        {
            "problem": "Aucune r√©ponse de l'API",
            "cause": "Serveur non d√©marr√© ou endpoint incorrect",
            "solution": "D√©marrer le serveur avec 'python app.py'"
        },
        {
            "problem": "News ne se chargent pas",
            "cause": "Probl√®me avec l'API CryptoCompare",
            "solution": "V√©rifier la connexion internet et l'API"
        }
    ]
    
    for i, issue in enumerate(issues, 1):
        print(f"\n{i}. ‚ùå {issue['problem']}")
        print(f"   Cause: {issue['cause']}")
        print(f"   Solution: {issue['solution']}")

if __name__ == "__main__":
    print("üöÄ Debug du bouton Analyser AutoWallet")
    print("=" * 60)
    
    debug_frontend_issue()
    check_common_issues()
    
    print("\nüéØ PROCHAINES √âTAPES:")
    print("   1. V√©rifiez la console du navigateur")
    print("   2. Testez les endpoints avec les scripts")
    print("   3. V√©rifiez l'authentification")
    print("   4. Regardez les logs du serveur")
    print("   5. Testez l'interface √©tape par √©tape")
